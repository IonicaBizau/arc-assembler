#!/usr/bin/env node

// Dependencies
var Fs = require("fs")
  , ArcAssembler = require("../lib")
  , Clp = require("clp")
  , Package = require("../package")
  , Path = require("path")
  , ReadUtf8 = require("read-utf8")
  ;

var sourceOpt = new Clp.Option(["s", "source"], "Sets the source file path.", "path")
  , outputOpt = new Clp.Option(["o", "output"], "Sets the output file path.", "path", "a.out")
  , parser = new Clp({
        name: "ARC Assembler"
      , version: Package.version
      , exe: Package.name
      , examples: [
            "arc-asm -s my-input.asm # This will generate a.out",
            "arc-asm -s my-input.asm -o program # This will generate the `program` file.",
        ]
      , docs_url: Package.homepage
      , process: true
    }, [
        sourceOpt
      , outputOpt
    ])
  ;


if (!sourceOpt.is_provided) {
    return console.log(parser.displayHelp());
}

// Input and output file paths
var INPUT_FILE = Path.resolve(process.cwd() + "/" + sourceOpt.value)
  , OUTPUT_FILE = Path.resolve(process.cwd() + "/" + outputOpt.value)
  , outputStream = Fs.createWriteStream(OUTPUT_FILE)
  ;

// Read the input file content
ReadUtf8(INPUT_FILE, function (err, content) {
    if (err) throw err;

    // Compile the input
    var result = ArcAssembler.compile(content);

    // Show some output
    result.raw.forEach(function (c) {
        console.log(c.code.match(/.{1,4}/g).join(" ") + " << Line " + c.line);
    });

    // Write things in the output stream
    outputStream.write("#!/usr/bin/env arc-int");
    outputStream.write(new Buffer(result.mCode));
    outputStream.end();

    // Make the file executable
    Fs.chmodSync(OUTPUT_FILE, 0755);
});
